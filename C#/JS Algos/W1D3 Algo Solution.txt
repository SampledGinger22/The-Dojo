/**
     * Removes the last node of this list.
     * - Time: O(?).
     * - Space: O(?).
     * @returns {any} The data from the node that was removed.
     */
    removeBack() {
        var node = this.head;
        if(this.isEmpty()){
            return false;
        }
        while(node.next != null){
            node = node.next;
        }
        var removedVal = node;
        node = null;
        console.log(removedVal);
        return removedVal;
    }

    /**
     * Determines whether or not the given search value exists in this list.
     * - Time: O(?).
     * - Space: O(?).
     * @param {any} val The data to search for in the nodes of this list.
     * @returns {boolean}
     */
    contains(val) {
        var node = this.head;
        if(this.isEmpty()){
            console.log("List is empty", false);
            return false
        }
        while(node.next != null){
            if(node.data == val){
                console.log(true);
                return true;
            }
            else {
                node = node.next;
            }
        }
        console.log(false);
        return false;
    }

    /**
     * Determines whether or not the given search value exists in this list.
     * - Time: O(?).
     * - Space: O(?).
     * @param {any} val The data to search for in the nodes of this list.
     * @param {?ListNode} current The current node during the traversal of this list
     *    or null when the end of the list has been reached.
     * @returns {boolean}
     */
    containsRecursive(val, current = this.head) {
        if(this.isEmpty()){
            console.log("This list is empty", false);
            return false;
        }
        if(current.data != val && current.next != null){
            console.log(current.data);
            current = current.next;
        }
        else if (current.data != val && current.next == null){
            console.log("no match -", false);
            return false;
        }
        else {
            console.log(true);
            return true;
        }
        var tempval = current;
        return this.containsRecursive(val, tempval);
    }

    // EXTRA
    /**
     * Recursively finds the maximum integer data of the nodes in this list.
     * - Time: O(?).
     * - Space: O(?).
     * @param {ListNode} runner The start or current node during traversal, or null
     *    when the end of the list is reached.
     * @param {ListNode} maxNode Keeps track of the node that contains the current
     *    max integer as it's data.
     * @returns {?number} The max int or null if none.
     */
    recursiveMax(runner = this.head, maxNode = this.head) {
        if(this.isEmpty()){
            console.log(null);
            return null;
        }
        if(runner.next == null){
            console.log(maxNode.data);
            return maxNode;
        }
        if(runner.next != null){
            runner = runner.next;
            if(runner.data > maxNode.data){
                maxNode = runner;
                if(runner.next == null){
                    console.log(maxNode.data);
                    return maxNode;
                }
            }
        }
        return this.recursiveMax(runner, maxNode);
    }